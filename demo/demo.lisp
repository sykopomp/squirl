(when (not (find-package 'SDL))
  (pushnew "/home/michael/lisp-libs/lispbuilder-read-only/lispbuilder-sdl/" asdf:*central-registry* :test #'equal)
  (pushnew "/home/michael/lisp-libs/lispbuilder-read-only/lispbuilder-sdl-image/" asdf:*central-registry* :test #'equal)
  (asdf:oos 'asdf:load-op 'lispbuilder-sdl)
;  (asdf:oos 'asdf:load-op :bordeaux-threads)
  (asdf:oos 'asdf:load-op :lispbuilder-sdl-image))

(in-package squirl)

(defparameter *bitmap-store* nil)
(defparameter *asset-directory* #P"/image/")

(defun world-box (a1 b1 a2 b2 a3 b3 a4 b4 space static-body)
  (let ((shape (make-segment static-body a1 b1 0.0)))
    (setf (shape-elasticity shape) 1.0)
    (setf (shape-friction shape) 1.0)
    (setf (shape-layers shape) 1)

    (world-add-static-shape space shape)

    (setf shape (make-segment static-body a2 b2 0.0))
    (setf (shape-elasticity shape) 1.0)
    (setf (shape-friction shape) 1.0)
    (setf (shape-layers shape) 1)
    (world-add-static-shape space shape)

    (setf shape ( make-segment static-body a3 b3 0.0))
    (setf (shape-elasticity shape) 1.0)
    (setf (shape-friction shape) 1.0)
    (setf (shape-layers shape) 1)
    (world-add-static-shape space shape)
    
    (setf shape (make-segment static-body a4 b4 0.0))
    (setf (shape-elasticity shape) 1.0)
    (setf (shape-friction shape) 1.0)
    (setf (shape-layers shape) 1)
    (world-add-static-shape space shape)))

(defun init-world ()
  (reset-shape-id-counter)
 (let* ((static-body (make-body most-positive-double-float most-positive-double-float 0 0))
	 (world (make-world :iterations 10))
	 (body (make-body 100.0 10000.0 0 1 1))
	 (shape (make-segment body (vec -75 0) (vec 75 0) 5)))
    (world-box (vec -320 -240) (vec -320 240) (vec 320 -240) (vec 320 240)
	       (vec -320 -240) (vec 320 -240)
	       (vec -320 240) (vec 320 240)
	       world static-body)
    (world-add-body world body)
    (setf (shape-elasticity shape) 1.0)
    (setf (shape-friction shape) 1.0)
    (world-add-shape world shape)
    (world-add-constraint world (make-pivot-joint static-body body (vec 1 1) (vec 1 1)))
    (return-from init-world world)))

(defun update (ticks world)
  (let* ((steps 3)
	(dt (/ 1.0 60.0 steps)))
    (dotimes (count steps)
      (world-step world dt))))

(defun add-circle (world)
  (let* ((size 10.0)
	 (mass 1.0)
	 (radius (vec-length (vec size size))))
    (let ((body (make-body mass (moment-for-circle mass 1.0 size) 0 0)))
      (setf (body-position body) (vec (- (* (/ 1.0 (+ (random 10) 1)) (- 640 (* 2 radius))) (- 320 radius)) (- (* (/ 1.0 (+ (random 10)1)) (- 400 (* 2 radius))) (- 240 radius))))
      (setf (body-velocity body) (vec* (vec (- (* 2 (/ 1.0 (+ 1 (random 10)))) 1) (- (* 2 (/ 1.0 (+ (random 10) 1))) 1)) 200))
      (world-add-body world body)
      (let ((shape (make-circle body size)))
	(setf (shape-elasticity shape) 1.0)
	(setf (shape-friction shape) 1.0)
	(world-add-shape world shape)))))

(defun add-box (world)
  (let* ((size 10.0)
	(mass 1.0)
	(verts (make-array 4))
	(radius (vec-length (vec size size))))
    (setf (elt verts 0) (vec (- size) (- size)))
    (setf (elt verts 1) (vec (- size) size))
    (setf (elt verts 2) (vec size size))
    (setf (elt verts 3) (vec size (- size)))
    (let ((body (make-body mass (moment-for-poly mass 4 verts) 5 5)))
      (setf (body-position body) (vec (- (* (/ 1.0 (+ (random 10) 1)) (- 640 (* 2 radius))) (- 320 radius)) (- (* (/ 1.0 (+ (random 10)1)) (- 400 (* 2 radius))) (- 240 radius))))
      (setf (body-velocity body) (vec* (vec (- (* 2 (/ 1.0 (+ 1 (random 10)))) 1) (- (* 2 (/ 1.0 (+ (random 10) 1))) 1)) 200))
      (world-add-body world body)
      (let ((shape (make-poly body verts)))
	(setf (shape-elasticity shape) 1.0)
	(setf (shape-friction shape) 1.0)
	(world-add-shape world shape)))))

(defgeneric draw-shape (shape color))

(defun body-with-color (color)
  (lambda (element)
    (draw-body element color)))

(defun draw-body (body color)
  (sdl:draw-filled-circle-* (+ (round (vec-x (body-position body))) 320) (+ (round (vec-y (body-position body))) 240) 2 :color color))

(defun shape-with-color (color)
  (lambda (element)
    (draw-shape element color)))

(defmethod draw-shape ((shape circle) color)
  (sdl:draw-circle-* (+ (round (vec-x (circle-transformed-center shape))) 320) (+ (round (vec-y (circle-transformed-center shape))) 240) (round (circle-radius shape)) :color color))

(defmethod draw-shape ((shape poly) color)
  (let ((vert1 (elt (poly-transformed-vertices shape) 0)))
    (do ((point-a 0 (1+ point-a))
	 (point-b 1 (1+ point-b)))	
	((= point-b (length (poly-transformed-vertices shape)))
	   (sdl:draw-line-* (round (+ (vec-x (elt (poly-transformed-vertices shape) point-a)) 320)) (round (+ (vec-y (elt (poly-transformed-vertices shape) point-a)) 240)) (round (+ (vec-x vert1) 320)) (round (+  (vec-y vert1) 240)) :color color))
      (sdl:draw-line-* (round (+ (vec-x (elt (poly-transformed-vertices shape) point-a)) 320)) (round (+ (vec-y (elt (poly-transformed-vertices shape) point-a)) 240)) (round (+  (vec-x (elt (poly-transformed-vertices shape) point-b)) 320)) (round (+  (vec-y (elt (poly-transformed-vertices shape) point-b)) 240)) :color color))))

(defmethod draw-shape ((seg segment) color)
  (sdl:draw-line-* (round (+ (vec-x (segment-trans-a seg)) 320)) (round (+ (vec-y (segment-trans-a seg)) 240)) (round (+ (vec-x (segment-trans-b seg)) 320)) (round (+ (vec-y (segment-trans-b seg)) 240)) :color color))

(defun render (world)
  (sdl:clear-display sdl:*black*)
  (map-world-hash (shape-with-color sdl:*green*) (world-active-shapes world))
  (map-world-hash (shape-with-color sdl:*red*) (world-static-shapes world))
  (map 'vector (body-with-color sdl:*blue*) (world-bodies world))
  (sdl:update-display))

(defun quick-and-dirty ()
  (sdl:with-init ()
    (sdl:window 800 600 :title-caption "SQIRL PHYSICS" :icon-caption "SQUIRL-DEMO")
    (let ((world (init-world)))
      (add-box world)
      (sdl:with-events ()
	(:idle () (update (sdl:sdl-get-ticks) world)  (render world))
	(:quit-event () t)
	(:video-expose-event () (sdl:update-display))
	(:key-down-event ()
			 (when (sdl:key-down-p :sdl-key-escape)
			   (sdl:push-quit-event))
			 (when (sdl:key-down-p :sdl-key-b)
			   (add-box world))
			 (when (sdl:key-down-p :sdl-key-c)
			   (add-circle world))))
      (sdl:quit-sdl :force t))))